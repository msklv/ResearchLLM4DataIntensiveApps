import random
import datetime
import pandas as pd


# Helper functions
def random_date(start, end):
    return start + datetime.timedelta(
        seconds=random.randint(0, int((end - start).total_seconds())),
    )

def random_choice(choices):
    return random.choice(choices)

def generate_summary(task_type):
    bug_topics = [
        "Ошибка обработки данных в модуле синхронизации",
        "Неверная интерпретация формата имени пакета",
        "Сбой авторизации через внутренний сервис",
        "Проблема с сериализацией объектов в API",
        "Некорректная обработка исключений в логике обработки сообщений",
    ]
    story_topics = [
        "Реализация механизма автообновления конфигураций",
        "Добавление поддержки новых типов аутентификации",
        "Создание модуля мониторинга состояния сервисов",
        "Разработка внутреннего API для управления задачами",
        "Интеграция с новой системой отчетности",
    ]
    task_topics = [
        "Настройка пайплайна CI/CD для платформенных сервисов",
        "Оптимизация запросов к базе данных",
        "Подготовка тестовой инфраструктуры для новых модулей",
        "Документирование внутренних API",
        "Обновление зависимостей проекта",
    ]
    improvement_topics = [
        "Улучшение логирования операций системы",
        "Повышение производительности сервиса авторизации",
        "Рефакторинг модуля обработки ошибок",
        "Упрощение конфигурации сервисов",
        "Оптимизация процесса сборки проекта",
    ]

    if task_type == "Bug":
        return random_choice(bug_topics)
    elif task_type == "Story":
        return random_choice(story_topics)
    elif task_type == "Task":
        return random_choice(task_topics)
    elif task_type == "Improvement":
        return random_choice(improvement_topics)
    else:
        return "Обновление системных компонентов"

# Constants
task_types = ["Bug", "Story", "Task", "Improvement"]
statuses = ["To Do", "In Progress", "Code Review", "Done", "Blocked"]
priorities = ["Low", "Medium", "High", "Critical"]
projects = [("PLATFORM", "Platform Core"), ("INFRA", "Infrastructure Services"), ("AUTOMATION", "QA Automation")]
sprints = ["Sprint 1", "Sprint 2", "Sprint 3", "Sprint 4"]
status_categories = ["New", "In Progress", "Completed"]

# Generation
records = []
start_date = datetime.datetime(2024, 1, 1)
end_date = datetime.datetime(2025, 4, 1)

for i in range(30):
    project_key, project_name = random_choice(projects)
    issue_key = f"{project_key}-{1000+i}"
    issue_id = f"ID-{5000+i}"
    created = random_date(start_date, end_date)
    updated = created + datetime.timedelta(days=random.randint(0, 10))
    resolved = updated + datetime.timedelta(days=random.randint(0, 5)) if random.choice([True, False]) else ""
    task_type = random_choice(task_types)
    status = random_choice(statuses)
    priority = random_choice(priorities)
    assignee = "dev_csharp"
    reporter = "team_lead"
    creator = "pm_user"
    description = f"Generated description for task {i}"
    time_spent = random.randint(1, 16) * 60 * 60  # in seconds
    total_time_spent = time_spent + random.randint(0, 4) * 60 * 60
    status_category = random_choice(status_categories)
    implementation_time = random.randint(1, 5) * 8 * 3600
    last_sprint = random_choice(sprints)
    comment = f"Autogenerated comment {i}"

    record = {
        "Тема": generate_summary(task_type),
        "Ключ проблемы": issue_key,
        "Идентификатор проблемы": issue_id,
        "Тип задачи": task_type,
        "Статус": status,
        "Ключ проекта": project_key,
        "Название проекта": project_name,
        "Приоритет": priority,
        "Исполнитель": assignee,
        "Автор": reporter,
        "Создатель": creator,
        "Создано": created.strftime("%Y-%m-%d %H:%M:%S"),
        "Обновленo": updated.strftime("%Y-%m-%d %H:%M:%S"),
        "Дата решения": resolved.strftime("%Y-%m-%d %H:%M:%S") if resolved else "",
        "Описание": description,
        "Затраченное время": time_spent,
        "Суммарное затраченое время": total_time_spent,
        "Пользовательское поле (В статусе)": status,
        "Пользовательское поле (Время реализации)": implementation_time,
        "Пользовательское поле (Категория статуса)": status_category,
        "Пользовательское поле (Последний спринт)": last_sprint,
        "Комментарий": comment,
    }
    records.append(record)

# Create DataFrame and save
jira_df = pd.DataFrame(records)



import ace_tools as tools

tools.display_dataframe_to_user(name="Jira Test Data", dataframe=jira_df)

# If needed to save to file:
jira_df.to_csv("jira_export_mock_updated.csv", index=False, encoding="utf-8-sig")
