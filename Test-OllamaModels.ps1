# –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ LLM –º–æ–¥–µ–ª–µ–π


# _______________ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã  ________
$serverUrl = "http://localhost:11434"   # Ollama-—Å–µ—Ä–≤–µ—Ä–∞



# _______________ –§—É–Ω–∫—Ü–∏–∏ _____________

# –§—É–Ω–∫—Ü–∏—è –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
function CheckServerConnection {
    param (
        [string]$serverUrl
    )
    Write-Host "`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama-—Å–µ—Ä–≤–µ—Ä–∞..."
    try {
        Invoke-RestMethod -Uri "$serverUrl/api/tags" -Method Get -TimeoutSec 5 > $null
        Write-Host "‚úÖ Ollama —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω!" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama —Å–µ—Ä–≤–µ—Ä—É –ø–æ –∞–¥—Ä–µ—Å—É $serverUrl" -ForegroundColor Red
        exit 1
    }
}


# –ü—Ä–æ–≥—Ä–µ–≤ LLM –º–æ–¥–µ–ª–∏
function WarmupLLMModel {
    param (
        [string]$llmModel
    )
    
    $llmPrompt = "–û–±—ä—è—Å–Ω–∏ –∫—Ä–∞—Ç–∫–æ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Retrieval-Augmented Generation (RAG)."
    $llmPayload = @{
        model = $llmModel
        prompt = $llmPrompt
        stream = $false
    } | ConvertTo-Json -Depth 3
    
    Write-Host "`–ó–∞–ø—Ä–æ—Å –∫ LLM –º–æ–¥–µ–ª–∏ '$llmModel'..." -ForegroundColor Cyan
    try {
        $llmResponse = Invoke-RestMethod -Uri "$serverUrl/api/generate" -Method Post -Body $llmPayload -ContentType "application/json"
        Write-Host "üì¢ –û—Ç–≤–µ—Ç –æ—Ç LLM:" -ForegroundColor Green
        Write-Host $llmResponse.response
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ LLM –º–æ–¥–µ–ª–∏" -ForegroundColor Red
        Write-Host $_.Exception.Message
    }
}


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
function CheckModelAvailability {
    param (
        [string]$model
    )

    Write-Host "`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ '$model'..."
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å–µ—Ä–≤–µ—Ä–∞ Ollama –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ POST –∏ –ø–µ—Ä–µ–¥–∞–µ–º JSON —Å –∏–º–µ–Ω–µ–º –º–æ–¥–µ–ª–∏ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    # curl http://localhost:11434/api/show -d '{ "model": "gemma3:12b-it-q4_K_M" }'
    $showPayload = @{
        model = $model
    } | ConvertTo-Json

    try {
        $response = Invoke-RestMethod -Uri "$serverUrl/api/show" -Method Post -Body $showPayload -ContentType "application/json" -TimeoutSec 5 -ErrorAction Stop
        Write-Host $response.modified_at -ForegroundColor DarkGray
        write-host $response.details -ForegroundColor DarkGray
        if ($response.details) {
            Write-Host "‚úÖ –ú–æ–¥–µ–ª—å '$model' –¥–æ—Å—Ç—É–ø–Ω–∞!" -ForegroundColor Green
        } else {
            Write-Host "‚ùå –ú–æ–¥–µ–ª—å '$model' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞." -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ '$model'" -ForegroundColor Red
        Write-Host $_.Exception.Message
    }

}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ Embedding –º–æ–¥–µ–ª–∏
function WarmupEmbeddingModel {
    param (
        [string]$embedModel
    )
    $embedPrompt = "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –≤–µ–∫—Ç–æ—Ä."
    $embedPayload = @{
        model = $embedModel
        prompt = $embedPrompt
    } | ConvertTo-Json -Depth 3
    
    Write-Host "`–ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ '$embedModel'..." -ForegroundColor Cyan
    try {
        $embedResponse = Invoke-RestMethod -Uri "$serverUrl/api/embeddings" -Method Post -Body $embedPayload -ContentType "application/json"
        Write-Host "üìä –ü–æ–ª—É—á–µ–Ω —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª–∏–Ω–æ–π $($embedResponse.embedding.Count)" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ embedding –º–æ–¥–µ–ª–∏" -ForegroundColor Red
        Write-Host $_.Exception.Message
    }

}


# –ü—Ä–æ–≤–µ—Ä–∫–∞ + –ø—Ä–æ–≥—Ä–µ–≤ RAG —Å—Ü–µ–Ω–∞—Ä–∏—è 
function ScenarioRAG {
    $llmModel   = "gemma3:12b-it-q4_K_M"
    $embedModel = "mxbai-embed-large"

    CheckServerConnection -serverUrl $serverUrl > $null

    CheckModelAvailability -model $llmModel > $null
    CheckModelAvailability -model $embedModel > $null

    WarmupLLMModel -llmModel $llmModel > $null
    WarmupEmbeddingModel -embedModel $embedModel > $null

}


# –ü—Ä–æ–≤–µ—Ä–∫–∞ + –ø—Ä–æ–≥—Ä–µ–≤ —Å—Ü–µ–Ω–∞—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞  
function ScenarioCodeGeneration  {
    $llmModel = "qwen2.5-coder:7b-instruct-q6_K"

    CheckServerConnection -serverUrl $serverUrl > $null

    CheckModelAvailability -model $llmModel > $null
    WarmupLLMModel -llmModel $llmModel > $null
}



# ________________ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤  _________________________

Write-Host
Write-Host "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π Ollama..." -ForegroundColor Cyan
Write-Host "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:"

$menu = @"
----------------------------------------
[1] –°—Ü–µ–Ω–∞—Ä–∏–π RAG
[2] –°—Ü–µ–Ω–∞—Ä–∏–π Code Generation
----------------------------------------
"@

Write-Host $menu

$validChoices = @("1", "2")
$scenarioChoice = ""
$attempts = 0
$maxAttempts = 5

while (-not ($validChoices -contains $scenarioChoice) -and $attempts -lt $maxAttempts) {
    $scenarioChoice = Read-Host "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è"
    if (-not ($validChoices -contains $scenarioChoice)) {
        $attempts++
        Write-Host "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è. –ü–æ–ø—ã—Ç–∫–∞ $attempts –∏–∑ $maxAttempts."
    }
}

if ($attempts -eq $maxAttempts) {
    Write-Host "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã." -ForegroundColor Red
    exit
}

switch ($scenarioChoice) {
    "1" { ScenarioRAG }
    "2" { ScenarioCodeGeneration }
}